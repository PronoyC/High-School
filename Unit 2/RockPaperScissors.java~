public class rockPaperScissors
{
    public static void main (String args[])
    {
	new rockPaperScissors ();
    }


    /* On this program, you are working with a team....
       The responsibility of the other person on the team
	   was to code the constructor.
       Your job is to code the other methods.
       Follow the comments.
       You are not allowed to edit the constructor.
    */

    public rockPaperScissors ()
    {
	int cPoint = 0;
	int uPoint = 0;
	int game = 1;
	char playAgain = 'y';
	System.out.println ("-----Rock, Paper, Scissors------\n");
	while (playAgain == 'y')
	{
	    char user = userChoice ();
	    System.out.println ("You have selected " + user);
	    char comp = compChoice ();
	    System.out.println ("The computer has selected " + comp);
	    char win = winner (comp, user);
	    if (win == 'c')
	    {
		cPoint++;
		System.out.println ("\nThe computer wins!");
	    }
	    else if (win == 'u')
	    {
		uPoint++;
		System.out.println ("\nYou win!");
	    }
	    else
		System.out.println ("\nThere is a tie!");
	    System.out.println ("Points: You: " + uPoint + " Computer: " + cPoint);
	    playAgain = IBIO.inputChar ("\nPlay again? (y/n) ");
	    System.out.println ("");
	}
	System.out.println ("Goodbye!");
    }


    public boolean isValid (String c)
    {
	/* All valid data:
	       Rock, ROCK, rock, r, R
	       Paper, PAPER, paper, p, P
	       Scissors, SCISSORS, scissors, s, S
	   return true if valid, false otherwise
	*/
	
	if (c.equals ("Rock") || c.equals ("ROCK") || c.equals ("rock") || c.equals ("r") || c.equals ("R"))
	    return true;
	else if (c.equals ("PAPER") || c.equals ("paper") || c.equals ("Paper") || c.equals ("p") || c.equals ("P"))
	    return true;
	else if (c.equals ("Scissors") || c.equals ("scissors") || c.equals ("SCISSORS") || c.equals ("s") || c.equals ("S"))
	    return true;
	else
	    return false;
    }


    public char userChoice ()
    { //returns r, p or s, based on the user's choice

	//print options: rock, paper, scissors

	//ask for user's choice. will need to store in String

	//Loop: if invalid input, ask again
	//stopping condition is the isValid method!!
	//something like: while(!isValid(choice))

	//If: to standardize values
	//if you've got one of Rock, ROCK, rock, r, R, then return 'r'.
	//else if you've got one of Paper, PAPER, paper, p, P, then return 'p'.
	//else return 's';
	
	String input = IBIO.inputString ("Rock, paper, or scissors? ");
	char output = 'n';
	
	while (!isValid(input))
	{
	    System.out.println ("That's not a valid input.");
	    input = IBIO.inputString ("Rock, paper, or scissors? ");
	}
	
	if (input.equals ("Rock") || input.equals ("ROCK") || input.equals ("rock") || input.equals ("r") || input.equals ("R"))
	    output = 'r';
	else if (input.equals ("PAPER") || input.equals ("paper") || input.equals ("Paper") || input.equals ("p") || input.equals ("P"))
	    output = 'p';
	else    
	    output = 's';
	
	return output;
    }


    public char compChoice ()
    { //make a random number between 1 and 3
	//if the number is 1, return r; 2 return s; 3 return p

	int num = (int) (Math.random () * 2 + 1);
	
	if (num == 1)
	    return 'r';
	else if (num == 2)
	    return 's';
	else
	    return 'p';
    }


    public char winner (char comp, char user)
    { //comp and user both hold one of r, s, p
	//returns c for computer, u for user and b for both

	if (comp == 'r' && user == 'r' || comp == 'p' && user == 'p' || comp == 's' && comp == 's')
	    return 'b';
	else if (comp == 'r' && user == 's' || comp == 'p' && user == 'r' || comp == 's' && comp == 'p')
	    return 'c';
	else
	    return 'u';
    }
}


